{
  "info": {
    "name": "TASK-006 Error Handling Contract Tests",
    "description": "Contract validation tests for ErrorResponse schema and HTTP status codes",
    "_postman_id": "task-006-error-handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "401 Unauthorized Error Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/updatecard/12345",
          "host": ["{{baseUrl}}"],
          "path": ["api", "updatecard", "12345"]
        },
        "description": "Test unauthorized access without token"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Response has ErrorResponse structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson).to.have.property('correlationId');",
              "    pm.expect(responseJson.error).to.have.property('code');",
              "    pm.expect(responseJson.error).to.have.property('message');",
              "    pm.expect(responseJson.error).to.have.property('details');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "400 Bad Request Error Test",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{valid_token}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"invalid\": \"payload\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/updatecard",
          "host": ["{{baseUrl}}"],
          "path": ["api", "updatecard"]
        },
        "description": "Test bad request with invalid payload"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Response has ErrorResponse structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error');",
              "    pm.expect(responseJson).to.have.property('timestamp');",
              "    pm.expect(responseJson).to.have.property('correlationId');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "405 Method Not Allowed Error Test",
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{valid_token}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/updatecard/12345",
          "host": ["{{baseUrl}}"],
          "path": ["api", "updatecard", "12345"]
        },
        "description": "Test method not allowed"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 405', function () {",
              "    pm.response.to.have.status(405);",
              "});",
              "",
              "pm.test('Response has ErrorResponse structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('error');",
              "    pm.expect(responseJson.error.code).to.eql('METHOD_NOT_ALLOWED');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "500 SOAP Fault Mapping Test",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{valid_token}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"cardNumber\": \"INVALID_CARD_TRIGGER_SOAP_FAULT\",\n    \"memberName\": \"Test User\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/updatecard",
          "host": ["{{baseUrl}}"],
          "path": ["api", "updatecard"]
        },
        "description": "Test SOAP fault to REST error mapping"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 500', function () {",
              "    pm.response.to.have.status(500);",
              "});",
              "",
              "pm.test('SOAP fault mapped to REST error', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error.code).to.be.oneOf(['BACKEND_SERVICE_ERROR', 'INTERNAL_SERVER_ERROR']);",
              "    pm.expect(responseJson.error.details).to.have.length.above(0);",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://localhost:7001",
      "type": "string"
    },
    {
      "key": "valid_token",
      "value": "your_valid_jwt_token_here",
      "type": "string"
    }
  ]
}
