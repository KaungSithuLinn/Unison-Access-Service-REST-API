# GitHub Actions workflow for Infrastructure Deployment
name: Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - "infrastructure/**"
  pull_request:
    branches:
      - main
    paths:
      - "infrastructure/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: "Action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.9.0"
  ARM_USE_CLI: true

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: infrastructure

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: infrastructure

      - name: Terraform Validate
        run: terraform validate
        working-directory: infrastructure

  terraform-plan-dev:
    name: Plan Development
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref != 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG_DEV }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA_DEV }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=unison-access-service/dev/terraform.tfstate"
        working-directory: infrastructure

      - name: Terraform Plan
        run: terraform plan -var-file="environments/development.tfvars" -out=tfplan
        working-directory: infrastructure

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-dev
          path: infrastructure/tfplan

  terraform-plan-staging:
    name: Plan Staging
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG_STAGING }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA_STAGING }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=unison-access-service/staging/terraform.tfstate"
        working-directory: infrastructure

      - name: Terraform Plan
        run: terraform plan -var-file="environments/staging.tfvars" -out=tfplan
        working-directory: infrastructure

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-staging
          path: infrastructure/tfplan

  terraform-apply-dev:
    name: Apply Development
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'development'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-dev
          path: infrastructure

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG_DEV }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA_DEV }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=unison-access-service/dev/terraform.tfstate"
        working-directory: infrastructure

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: infrastructure

  terraform-apply-staging:
    name: Apply Staging
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-staging
          path: infrastructure

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG_STAGING }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA_STAGING }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=unison-access-service/staging/terraform.tfstate"
        working-directory: infrastructure

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: infrastructure

  terraform-plan-prod:
    name: Plan Production
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG_PROD }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA_PROD }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=unison-access-service/prod/terraform.tfstate"
        working-directory: infrastructure

      - name: Terraform Plan
        run: terraform plan -var-file="environments/production.tfvars" -out=tfplan
        working-directory: infrastructure

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-prod
          path: infrastructure/tfplan

  terraform-apply-prod:
    name: Apply Production
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-prod
          path: infrastructure

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG_PROD }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA_PROD }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=unison-access-service/prod/terraform.tfstate"
        working-directory: infrastructure

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: infrastructure

      - name: Post-deployment Health Check
        run: |
          # Wait for deployment to complete
          sleep 30

          # Get web app URL from Terraform output
          WEB_APP_URL=$(terraform output -raw web_app_url)

          # Test health endpoint
          curl -f "${WEB_APP_URL}/health" || exit 1

          echo "Production deployment successful and health check passed!"
        working-directory: infrastructure

  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (Development)
        if: github.event.inputs.environment == 'development'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Azure Login (Staging)
        if: github.event.inputs.environment == 'staging'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Azure Login (Production)
        if: github.event.inputs.environment == 'production'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Set Backend Config
        run: |
          case "${{ github.event.inputs.environment }}" in
            "development")
              echo "TF_STATE_RG=${{ secrets.TF_STATE_RG_DEV }}" >> $GITHUB_ENV
              echo "TF_STATE_SA=${{ secrets.TF_STATE_SA_DEV }}" >> $GITHUB_ENV
              echo "TF_STATE_KEY=unison-access-service/dev/terraform.tfstate" >> $GITHUB_ENV
              ;;
            "staging")
              echo "TF_STATE_RG=${{ secrets.TF_STATE_RG_STAGING }}" >> $GITHUB_ENV
              echo "TF_STATE_SA=${{ secrets.TF_STATE_SA_STAGING }}" >> $GITHUB_ENV
              echo "TF_STATE_KEY=unison-access-service/staging/terraform.tfstate" >> $GITHUB_ENV
              ;;
            "production")
              echo "TF_STATE_RG=${{ secrets.TF_STATE_RG_PROD }}" >> $GITHUB_ENV
              echo "TF_STATE_SA=${{ secrets.TF_STATE_SA_PROD }}" >> $GITHUB_ENV
              echo "TF_STATE_KEY=unison-access-service/prod/terraform.tfstate" >> $GITHUB_ENV
              ;;
          esac

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${TF_STATE_RG}" \
            -backend-config="storage_account_name=${TF_STATE_SA}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${TF_STATE_KEY}"
        working-directory: infrastructure

      - name: Terraform Destroy
        run: terraform destroy -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -auto-approve
        working-directory: infrastructure
