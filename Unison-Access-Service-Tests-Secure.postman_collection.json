{
  "info": {
    "name": "Unison Access Service API Tests - Secure",
    "description": "Secure test collection for Unison Access Service API v1.5 with HTTPS and environment variables",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Only check for required token and set dynamic test data",
          "if (!pm.environment.get('unison_token')) {",
          "    throw new Error('SECURITY: unison_token environment variable must be set');",
          "}",
          "if (!pm.globals.get('test_user_id')) {",
          "    pm.globals.set('test_user_id', 'testuser_' + Date.now());",
          "}",
          "if (!pm.globals.get('test_card_number')) {",
          "    pm.globals.set('test_card_number', '1000' + Math.floor(Math.random() * 10000));",
          "}"
        ]
      }
    }
  ],
  "variable": [],
  "item": [
    {
      "name": "1. Security Health Check",
      "item": [
        {
          "name": "Validate Security Configuration",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Only check for API token configuration",
                  "pm.test('API token is configured', function () {",
                  "    const token = pm.environment.get('unison_token');",
                  "    pm.expect(token).to.not.be.empty;",
                  "    pm.expect(token.length).to.be.at.least(10);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "{{unison_token}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Security-Test/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/Ping",
              "host": ["{{base_url}}"],
              "path": ["Ping"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Service Health Check",
      "item": [
        {
          "name": "Ping Service",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Service is responding', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Content-Type is JSON', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "{{unison_token}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Health-Check/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/Ping",
              "host": ["{{base_url}}"],
              "path": ["Ping"]
            }
          },
          "response": []
        },
        {
          "name": "Get Version",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Version endpoint responds', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Version information is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    // Check if response contains version information",
                  "    pm.expect(responseJson).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "{{unison_token}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Version-Check/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/GetVersion",
              "host": ["{{base_url}}"],
              "path": ["GetVersion"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. User Management Tests",
      "item": [
        {
          "name": "Create/Update User with Validation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Input validation",
                  "const userId = pm.globals.get('test_user_id');",
                  "pm.test('User ID is properly formatted', function () {",
                  "    pm.expect(userId).to.match(/^[a-zA-Z0-9_]+$/);",
                  "    pm.expect(userId.length).to.be.below(51);",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('User creation/update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains expected structure', function () {",
                  "    var contentType = pm.response.headers.get('Content-Type');",
                  "    if (contentType && contentType.includes('application/json')) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.be.an('object');",
                  "    } else {",
                  "        pm.expect.fail('Response is not JSON');",
                  "    }",
                  "});",
                  "",
                  "pm.test('No sensitive data in response', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.include('password');",
                  "    pm.expect(responseText).to.not.include('token');",
                  "    pm.expect(responseText).to.not.include('secret');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "{{unison_token}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman-User-Management/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/UpdateUser",
              "host": ["{{base_url}}"],
              "path": ["UpdateUser"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"userId\\\": \\\"{{test_user_id}}\\\",\\n  \\\"firstName\\\": \\\"John\\\",\\n  \\\"lastName\\\": \\\"Doe\\\",\\n  \\\"pinCode\\\": \\\"1234\\\",\\n  \\\"validFrom\\\": \\\"2025-09-01T00:00:00\\\",\\n  \\\"validUntil\\\": \\\"2026-09-01T00:00:00\\\",\\n  \\\"accessFlags\\\": 0,\\n  \\\"fields\\\": []\\n}"
            }
          },
          "response": []
        },
        {
          "name": "Add User Photo with Security Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Photo upload successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File size validation working', function () {",
                  "    // This is a small test image, should pass",
                  "    pm.response.to.not.have.status(413); // Payload too large",
                  "});",
                  "",
                  "pm.test('Response time acceptable for file upload', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('Response contains expected structure', function () {",
                  "    var contentType = pm.response.headers.get('Content-Type');",
                  "    if (contentType && contentType.includes('application/json')) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.be.an('object');",
                  "    } else {",
                  "        pm.expect.fail('Response is not JSON');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "{{unison_token}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Photo-Upload/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/UpdateUserPhoto",
              "host": ["{{base_url}}"],
              "path": ["UpdateUserPhoto"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"userId\\\": \\\"{{test_user_id}}\\\",\\n  \\\"photo\\\": \\\"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwA/wA8A\\\"\\n}"
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Card Management Tests",
      "item": [
        {
          "name": "Add Card to User with Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Card addition successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Card number validation working', function () {",
                  "    const cardNumber = pm.globals.get('test_card_number');",
                  "    pm.expect(cardNumber).to.match(/^[0-9]+$/);",
                  "});",
                  "",
                  "pm.test('Response structure is valid', function () {",
                  "    var contentType = pm.response.headers.get('Content-Type');",
                  "    if (contentType && contentType.includes('application/json')) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.be.an('object');",
                  "    } else {",
                  "        pm.expect.fail('Response is not JSON');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "{{unison_token}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Card-Management/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/UpdateCard",
              "host": ["{{base_url}}"],
              "path": ["UpdateCard"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"userId\\\": \\\"{{test_user_id}}\\\",\\n  \\\"profileName\\\": \\\"Default\\\",\\n  \\\"cardNumber\\\": \\\"{{test_card_number}}\\\",\\n  \\\"systemNumber\\\": \\\"\\\",\\n  \\\"versionNumber\\\": \\\"\\\",\\n  \\\"miscNumber\\\": \\\"\\\",\\n  \\\"cardStatus\\\": 1\\n}"
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "5. Security Tests",
      "item": [
        {
          "name": "Test Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message does not leak information', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.include('database');",
                  "    pm.expect(responseText).to.not.include('internal');",
                  "    pm.expect(responseText).to.not.include('stack');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Unison-Token",
                "value": "invalid-token-123"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Security-Test/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/Ping",
              "host": ["{{base_url}}"],
              "path": ["Ping"]
            },
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": []
        },
        {
          "name": "Test Missing Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Missing token rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Security headers present', function () {",
                  "    // Check for security headers in response",
                  "    const headers = pm.response.headers;",
                  "    // Validate that the API doesn't expose unnecessary headers",
                  "    pm.expect(headers.get('Server')).to.not.include('Apache');",
                  "    pm.expect(headers.get('Server')).to.not.include('IIS');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "Postman-Security-Test/1.0"
              }
            ],
            "url": {
              "raw": "{{base_url}}/Ping",
              "host": ["{{base_url}}"],
              "path": ["Ping"]
            },
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": []
        }
      ]
    }
  ]
}
